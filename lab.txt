Optimal page replacement 
#include <stdio.h>

int findOptimal(int pages[], int temp[], int n, int index) {
    int farthest = index, pos = -1, i, j;
    for (i = 0; i < n; ++i) {
        int found = 0;
        for (j = index; j < n; ++j) {
            if (pages[j] == temp[i]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                found = 1;
                break;
            }
        }
        if (!found)
            return i;  // If a page is not found in the future references
    }
    return (pos == -1) ? 0 : pos;  // If all pages are found in future references
}

int main() {
    int n, frames, pages[30], temp[10], pageFaults = 0;
    
    printf("Enter number of pages: ");
    scanf("%d", &n);
    
    printf("Enter reference string: ");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &pages[i]);
    }
    
    printf("Enter number of frames: ");
    scanf("%d", &frames);

    for (int i = 0; i < frames; ++i) {
        temp[i] = -1;
    }

    for (int i = 0; i < n; ++i) {
        int pageHit = 0;
        
        for (int j = 0; j < frames; ++j) {
            if (temp[j] == pages[i]) {
                pageHit = 1;
                break;
            }
        }
        
        if (!pageHit) {
            if (i < frames) {
                temp[i] = pages[i];
            } else {
                int pos = findOptimal(pages, temp, frames, i);
                temp[pos] = pages[i];
            }
            pageFaults++;
        }
        
        printf("\n");
        for (int j = 0; j < frames; ++j) {
            printf("%d\t", temp[j]);
        }
    }
    
    printf("\n\nTotal Page Faults = %d\n", pageFaults);
    
    return 0;
}

2.FCFS Page replacement

#include <iostream>
using namespace std;

int main()
{
    int pages[30],n,frames,temp[10],pagefound,emptyslot,pos=0,fault=0;
    
    cout <<"Enter no. of pages\n";
    cin>>n;

    cout<<"Enter reference string \n";
    for(int i=0;i<n;i++){
        cin>>pages[i];
    }
    cout<<"Enter no. of frames\n";
    cin>>frames;
    
    for(int i=0;i<frames;i++){
        temp[i]=-1;
    }
    for(int i=0;i<n;i++){
        pagefound=0;
        
        for(int j=0;j<frames;j++){
            if(temp[j]==pages[i]){
                pagefound=1;
                break;
            }
        }
        if(pagefound==0){
            emptyslot=0;
            for(int j=0;j<frames;j++){
                if(temp[j]==-1){
                    fault++;
                    temp[j]=pages[i];
                    emptyslot=1;
                    break;
                }
            }
        
        if(emptyslot==0){
            temp[pos]=pages[i];
            pos++;
            if(pos>=frames){
                pos=0;
            }
            fault++;
        }
    }
        cout<<"\n";
        for(int j=0;j<frames;j++){
            cout<<temp[j]<<" ";
        }
    }
        cout<<"\n";
        cout<<"Page faults are :"<<fault;

    return 0;
}
3.LRU 
#include <stdio.h>

int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;
    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

int main() {
    int n, frames, pages[30], temp[10], counter = 0, time[10], pageHit, emptyFrame, i, j, pos, pageFaults = 0;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter reference string: ");
    for (i = 0; i < n; ++i) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &frames);

    for (i = 0; i < frames; ++i) {
        temp[i] = -1;
    }

    for (i = 0; i < n; ++i) {
        pageHit = emptyFrame = 0;

        for (j = 0; j < frames; ++j) {
            if (temp[j] == pages[i]) {
                counter++;
                time[j] = counter;
                pageHit = emptyFrame = 1;
                break;
            }
        }

        if (pageHit == 0) {
            for (j = 0; j < frames; ++j) {
                if (temp[j] == -1) {
                    counter++;
                    pageFaults++;
                    temp[j] = pages[i];
                    time[j] = counter;
                    emptyFrame = 1;
                    break;
                }
            }
        }

        if (emptyFrame == 0) {
            pos = findLRU(time, frames);
            counter++;
            pageFaults++;
            temp[pos] = pages[i];
            time[pos] = counter;
        }

        printf("\n");
        for (j = 0; j < frames; ++j) {
            printf("%d\t", temp[j]);
        }
    }

    printf("\n\nTotal Page Faults = %d\n", pageFaults);

    return 0;
}

4.Address Book
#                             Online Bash Shell.
#                 Code, Compile, Run and Debug Bash script online.
# Write your code in this editor and press "Run" button to execute it.


echo "Hello World";
add_records(){
    read -p "ID :" ID
    read -p "Name : " Name
    read -p "Phone :" Phone
    echo "$ID" "$Name" "$Phone" >> address.txt
    echo "Entry created!"
}
search_records(){
    record=$1
    grep -w "$record" address.txt | while read -r id name phone; do
    echo "ID - $id name-$name phone-$phone"
    done
}
delete_records(){
    read -p "Enter record to be deleted - " data
    sed -i "/$data/d" address.txt
    echo "Deleted Successfully." 
}
modify(){
    read -p "wht to modify- " data
    read -p "Enter new ID: " NEW_ID
    read -p "Enter new Name: " NEW_NAME
    read -p "Enter new Phone: " NEW_PHONE
    sed -i "/$data/c\\$NEW_ID $NEW_NAME $NEW_PHONE" address.txt
}
read choice 
case "$choice" in 
1)add_records ;;
2)read -p "what to search :" num ;search_records "$num";;
3)delete_records;;
4)modify;;
Esac

5.Bankers Algo 
#include <iostream>
using namespace std;

int main(){
    int n=5;
    int r=3;

    int alloc[5][3]={{0,0,1},{3,0,0},{1,0,0},{2,3,2},{0,0,3}};
    int max[5][3]={{7,6,3},{3,2,2},{8,0,2},{2,1,2},{5,2,3}};
    int avail[3]={2,3,2};

    int need[n][r];

    for(int i=0;i<n;i++){
        for(int j=0;j<r;j++){
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    int f[n],ans[n],ind=0;

    for(int k=0;k<n;k++){
        f[k]=0;
    }
    for(int k=0;k<5;k++){
        for(int i=0;i<n;i++){
            if(f[i]==0){
            int flag=0;
            for(int j=0;j<r;j++){
                if(need[i][j]>avail[j]){
                    flag=1;
                    break;
                }
            }
            if(flag==0){
                ans[ind++]=i;
                for(int y=0;y<r;y++){
                    avail[y]+=alloc[i][y];
                }
                f[i]=1;
            }
        }
    }
}
cout<<"The safe sequence are : "<<endl;
for(int i=0;i<n;i++){
    cout<<"P"<<ans[i]<<"->";
}

return 0;
}
6.SJF 
#include <iostream>
using namespace std;

int main() {
    int arrival_time[10], burst_time[10], temp[10];
    int i, smallest, count = 0, time, limit;
    double wait_time = 0, turnaround_time = 0, end;
    float average_waiting_time, average_turnaround_time;

    cout << "Enter the Total Number of Processes: ";
    cin >> limit;

    cout << "\nEnter Details of " << limit << " Processes\n";
    for (i = 0; i < limit; i++) {
        cout << "\nEnter Arrival Time for Process " << i + 1 << ": ";
        cin >> arrival_time[i];
        cout << "Enter Burst Time for Process " << i + 1 << ": ";
        cin >> burst_time[i];
        temp[i] = burst_time[i];  // Copy burst times to a temporary array
    }

    // Setting an arbitrarily large value for the last index of burst_time to help find the smallest
    burst_time[9] = 9999;

    // Start simulating time, and process each task until all are complete
    for (time = 0; count != limit; time++) {
        smallest = 9;  // Reset smallest each loop

        for (i = 0; i < limit; i++) {
            // Find the process with the smallest burst time that's ready to execute
            if (arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0) {
                smallest = i;
            }
        }

        // Reduce the burst time of the selected process
        burst_time[smallest]--;

        // If a process finishes, update waiting and turnaround times
        if (burst_time[smallest] == 0) {
            count++;
            end = time + 1;
            wait_time += end - arrival_time[smallest] - temp[smallest];
            turnaround_time += end - arrival_time[smallest];
        }
    }

    // Calculate average waiting and turnaround times
    average_waiting_time = wait_time / limit;
    average_turnaround_time = turnaround_time / limit;

    // Output the results
    cout << "\nAverage Waiting Time: " << average_waiting_time << endl;
    cout << "Average Turnaround Time: " << average_turnaround_time << endl;

    return 0;
}
7.RR
#include <iostream>
#include <algorithm>
using namespace std;

void findWaitingTime(int processes[], int n, int bt[], int wt[], int at[], int timeQuantum) {
    int rem_bt[n];
    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];  // Initialize remaining burst times
    }

    int t = 0;  // Current time
    bool done;

    while (true) {
        done = true;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0 && at[i] <= t) {  // Process has arrived and has remaining burst time
                done = false;  // There is a pending process

                if (rem_bt[i] > timeQuantum) {
                    t += timeQuantum;
                    rem_bt[i] -= timeQuantum;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - bt[i] - at[i];
                    rem_bt[i] = 0;
                }
            }
        }

        // If no process was processed in this cycle, increment time
        if (done) {
            for (int i = 0; i < n; i++) {
                if (rem_bt[i] > 0 && at[i] > t) {
                    t = at[i];  // Move to next process arrival time
                    done = false;
                    break;
                }
            }
        }

        if (done) break;  // All processes are complete
    }
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}

int main() {
    int n = 3;
    int processes[] = {1, 2, 3};
    int burst_time[] = {10, 5, 8};
    int arrival_time[] = {0, 1, 2};
    int timeQuantum = 2;

    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    findWaitingTime(processes, n, burst_time, wt, arrival_time, timeQuantum);
    findTurnAroundTime(processes, n, burst_time, wt, tat);

    cout << "Processes  Arrival Time  Burst Time  Waiting Time  Turn Around Time\n";
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        cout << " " << processes[i] << "\t\t" << arrival_time[i] << "\t\t" << burst_time[i] 
             << "\t\t" << wt[i] << "\t\t" << tat[i] << endl;
    }

    cout << "\nAverage waiting time = " << (float)total_wt / (float)n;
    cout << "\nAverage turn around time = " << (float)total_tat / (float)n;
    return 0;
}
8.using mutex 
#include <pthread.h>
#include <stdio.h>

pthread_mutex_t wrt; // Mutex for writer's access
pthread_mutex_t mutex; // Mutex for controlling access to the numreader count
int cnt = 1;
int numreader = 0;

void *writer(void *wno)
{
    pthread_mutex_lock(&wrt); // Lock the writer mutex
    cnt = cnt * 2;
    printf("Writer %d modified cnt to %d\n", *((int *)wno), cnt);
    pthread_mutex_unlock(&wrt); // Unlock the writer mutex
}

void *reader(void *rno)
{
    pthread_mutex_lock(&mutex); // Lock the mutex to modify numreader
    numreader++;
    if (numreader == 1) {
        pthread_mutex_lock(&wrt); // First reader locks the writer
    }
    pthread_mutex_unlock(&mutex); // Unlock the mutex

    // Reading Section
    printf("Reader %d: read cnt as %d\n", *((int *)rno), cnt);

    pthread_mutex_lock(&mutex); // Lock the mutex to modify numreader
    numreader--;
    if (numreader == 0) {
        pthread_mutex_unlock(&wrt); // Last reader releases the writer
    }
    pthread_mutex_unlock(&mutex); // Unlock the mutex
}

int main()
{
    pthread_t read[10], write[5];
    pthread_mutex_init(&wrt, NULL); // Initialize mutex for writer access
    pthread_mutex_init(&mutex, NULL); // Initialize mutex for reader count

    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    for (int i = 0; i < 10; i++) {
        pthread_create(&read[i], NULL, reader, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++) {
        pthread_create(&write[i], NULL, writer, (void *)&a[i]);
    }

    for (int i = 0; i < 10; i++) {
        pthread_join(read[i], NULL);
    }
    for (int i = 0; i < 5; i++) {
        pthread_join(write[i], NULL);
    }

    pthread_mutex_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}
9.using semaphore
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

sem_t wrt; // Semaphore for writer's access
sem_t mutex; // Semaphore for controlling access to the numreader count
int cnt = 1;
int numreader = 0;

void *writer(void *wno)
{
    sem_wait(&wrt);  // Wait for access to modify cnt
    cnt = cnt * 2;
    printf("Writer %d modified cnt to %d\n", *((int *)wno), cnt);
    sem_post(&wrt);  // Release access to writer
}

void *reader(void *rno)
{
    sem_wait(&mutex); // Lock the mutex to modify numreader
    numreader++;
    if (numreader == 1) {
        sem_wait(&wrt); // First reader locks the writer
    }
    sem_post(&mutex); // Unlock the mutex

    // Reading Section
    printf("Reader %d: read cnt as %d\n", *((int *)rno), cnt);

    sem_wait(&mutex); // Lock the mutex to modify numreader
    numreader--;
    if (numreader == 0) {
        sem_post(&wrt); // Last reader releases the writer
    }
    sem_post(&mutex); // Unlock the mutex
}

int main()
{
    pthread_t read[10], write[5];
    sem_init(&wrt, 0, 1); // Initialize semaphore for writer (binary semaphore)
    sem_init(&mutex, 0, 1); // Initialize semaphore for reader count mutex

    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    for (int i = 0; i < 10; i++) {
        pthread_create(&read[i], NULL, reader, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++) {
        pthread_create(&write[i], NULL, writer, (void *)&a[i]);
    }

    for (int i = 0; i < 10; i++) {
        pthread_join(read[i], NULL);
    }
    for (int i = 0; i < 5; i++) {
        pthread_join(write[i], NULL);
    }

    sem_destroy(&wrt);
    sem_destroy(&mutex);

    return 0;
}


